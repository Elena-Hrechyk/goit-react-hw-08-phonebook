{"version":3,"file":"static/js/271.af7e9f1a.chunk.js","mappings":"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","sources":["../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selector.js","components/FormContact/Form.styled.js","components/FormContact/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filtredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n    return filtredContacts.sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const Lable = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 700;\n  border-radius: 8px;\n`;\n\nexport const BtnAddContact = styled.button`\n  width: 150px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  padding: 8px;\n  cursor: pointer;\n\n  font-size: 14px;\n  font-weight: 700;\n\n  border-radius: 10px;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: aliceblue;\n    background-color: #4468df;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Forma, Lable, Input, BtnAddContact } from './Form.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const nameUser = values.name.toLowerCase().trim();\n\n    const checkContact = contacts.some(\n      item => item.name.toLowerCase() === nameUser\n    );\n\n    if (checkContact) {\n      return alert(`${values.name.trim()} is already in contacts`);\n    }\n\n    dispatch(\n      addContacts({\n        name: values.name.trim(),\n        number: values.number.trim(),\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Forma>\n        <Lable>\n          Name\n          <Input type=\"text\" name=\"name\" placeholder=\"Adrian\" autoFocus />\n        </Lable>\n        <Lable>\n          Number\n          <Input type=\"tel\" name=\"number\" placeholder=\"380671234567\" />\n        </Lable>\n        <BtnAddContact type=\"submit\">Add contact</BtnAddContact>\n      </Forma>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const BoxFilter = styled.form`\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const LableFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const InputFilter = styled.input`\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 700;\n  border: 1px solid rgba(161, 165, 161, 0.5);\n  border-radius: 8px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filtersSlice';\n\nimport { BoxFilter, LableFilter, InputFilter } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = evt => {\n    const value = evt.target.value.toLowerCase().trim();\n\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <>\n      <BoxFilter>\n        <LableFilter>\n          Filter contacts by Name\n          <InputFilter\n            type=\"text\"\n            name=\"filter\"\n            onChange={handleFilter}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n        </LableFilter>\n      </BoxFilter>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const ItemContact = styled.li`\n  display: flex;\n  grid-gap: 10px;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const InfoContact = styled.p`\n  width: 300px;\n  font-size: 16px;\n  font-weight: 600;\n  margin-right: 10px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const BtnDelContact = styled.button`\n  display: block;\n  margin-left: auto;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 8px;\n  padding-right: 8px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 700;\n  border-radius: 10px;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: aliceblue;\n    background-color: #4468df;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selector';\nimport {\n  List,\n  ItemContact,\n  InfoContact,\n  BtnDelContact,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <List>\n        {visibleContacts.map(item => {\n          return (\n            <ItemContact key={item.id}>\n              <InfoContact>\n                {item.name}: {item.number}\n              </InfoContact>\n              <BtnDelContact\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(item.id))}\n              >\n                Delete\n              </BtnDelContact>\n            </ItemContact>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selector';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { FormContact } from 'components/FormContact/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactsList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Section,\n  Container,\n  Title,\n  TextTitle,\n  ErroTitle,\n} from 'components/App.styled';\nimport { selectIsLogin } from 'redux/auth/authSelectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(selectIsLogin);\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLogin && (\n        <Section>\n          <Container>\n            <Title>Phonebook</Title>\n            <FormContact />\n            {loading && !error && <Loader />}\n            {contacts.length > 0 ? (\n              <>\n                <TextTitle>Contacts</TextTitle>\n                <Filter />\n                <ContactList />\n              </>\n            ) : (\n              <TextTitle>No saved contacts</TextTitle>\n            )}\n            {error && <ErroTitle>{error}</ErroTitle>}\n          </Container>\n        </Section>\n      )}\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","contact","toLowerCase","includes","sort","firstContact","secondContact","localeCompare","Forma","styled","Form","Lable","Input","Field","BtnAddContact","schema","yup","shape","required","number","initialValues","FormContact","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","nameUser","trim","some","item","alert","addContacts","type","placeholder","autoFocus","BoxFilter","LableFilter","InputFilter","Filter","onChange","evt","target","filterContacts","pattern","List","ItemContact","InfoContact","BtnDelContact","ContactList","visibleContacts","onClick","deleteContact","id","isLogin","selectIsLogin","loading","useEffect","fetchContacts","Loader"],"sourceRoot":""}