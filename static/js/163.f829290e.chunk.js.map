{"version":3,"file":"static/js/163.f829290e.chunk.js","mappings":"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","sources":["redux/contacts/selector.js","components/FormContact/Form.styled.js","components/FormContact/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filtredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n    return filtredContacts.sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n  }\n);\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const Lable = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 700;\n  border-radius: 8px;\n`;\n\nexport const BtnAddContact = styled.button`\n  width: 150px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  padding: 8px;\n  cursor: pointer;\n\n  font-size: 14px;\n  font-weight: 700;\n\n  border-radius: 10px;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: aliceblue;\n    background-color: #4468df;\n  }\n`;\n","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selector';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Forma, Lable, Input } from './Form.styled';\nimport Button from '@mui/material/Button';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const FormContact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const nameUser = values.name.toLowerCase().trim();\n\n    const checkContact = contacts.some(\n      item => item.name.toLowerCase() === nameUser\n    );\n\n    if (checkContact) {\n      return alert(`${values.name.trim()} is already in contacts`);\n    }\n\n    dispatch(\n      addContacts({\n        name: values.name.trim(),\n        number: values.number.trim(),\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Forma>\n        <Lable>\n          Name\n          <Input type=\"text\" name=\"name\" placeholder=\"Adrian\" autoFocus />\n        </Lable>\n        <Lable>\n          Number\n          <Input type=\"tel\" name=\"number\" placeholder=\"380671234567\" />\n        </Lable>\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </Forma>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const BoxFilter = styled.form`\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const LableFilter = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const InputFilter = styled.input`\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 700;\n  border: 1px solid rgba(161, 165, 161, 0.5);\n  border-radius: 8px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filtersSlice';\n\nimport { BoxFilter, LableFilter, InputFilter } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = evt => {\n    const value = evt.target.value.toLowerCase().trim();\n\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <>\n      <BoxFilter>\n        <LableFilter>\n          Filter contacts by Name\n          <InputFilter\n            type=\"text\"\n            name=\"filter\"\n            onChange={handleFilter}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n        </LableFilter>\n      </BoxFilter>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  width: 400px;\n  padding: 15px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const ItemContact = styled.li`\n  display: flex;\n  grid-gap: 10px;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const InfoContact = styled.p`\n  width: 300px;\n  font-size: 16px;\n  font-weight: 600;\n  margin-right: 10px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const BtnDelContact = styled.button`\n  display: block;\n  margin-left: auto;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 8px;\n  padding-right: 8px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 700;\n  border-radius: 10px;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: aliceblue;\n    background-color: #4468df;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selector';\nimport {\n  List,\n  ItemContact,\n  InfoContact,\n  BtnDelContact,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <List>\n        {visibleContacts.map(item => {\n          return (\n            <ItemContact key={item.id}>\n              <InfoContact>\n                {item.name}: {item.number}\n              </InfoContact>\n              <BtnDelContact\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(item.id))}\n              >\n                Delete\n              </BtnDelContact>\n            </ItemContact>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selector';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { FormContact } from 'components/FormContact/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactsList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Section,\n  Container,\n  Title,\n  TextTitle,\n  ErroTitle,\n} from 'components/App.styled';\nimport { selectIsLogin } from 'redux/auth/authSelectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(selectIsLogin);\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLogin && (\n        <Section>\n          <Container>\n            <Title>Phonebook</Title>\n            <FormContact />\n            {loading && !error ? (\n              <Loader />\n            ) : (\n              <>\n                {contacts.length > 0 ? (\n                  <>\n                    <TextTitle>Contacts</TextTitle>\n                    <Filter />\n                    <ContactList />\n                  </>\n                ) : (\n                  <TextTitle>No saved contacts</TextTitle>\n                )}\n              </>\n            )}\n            {error && <ErroTitle>{error}</ErroTitle>}\n          </Container>\n        </Section>\n      )}\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","sort","firstContact","secondContact","localeCompare","Forma","styled","Form","Lable","Input","Field","schema","yup","shape","required","number","initialValues","FormContact","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","nameUser","trim","some","item","alert","addContacts","type","placeholder","autoFocus","Button","variant","BoxFilter","LableFilter","InputFilter","Filter","onChange","evt","value","target","filterContacts","pattern","List","ItemContact","InfoContact","BtnDelContact","ContactList","visibleContacts","map","onClick","deleteContact","id","isLogin","selectIsLogin","loading","useEffect","fetchContacts","Loader","length"],"sourceRoot":""}