{"version":3,"file":"static/js/98.af4b4b5d.chunk.js","mappings":"wRAGaA,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,6NAWLE,EAAQF,EAAAA,EAAAA,MAAH,sIAQLG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,+HAQLK,EAAgBL,EAAAA,EAAAA,OAAH,+a,iHCtBpBM,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaG,WAAWD,QAAQE,WACvCC,SAAUL,EAAAA,KAEPM,IAAI,EAAG,sCACPF,aAGCG,EAAgB,CACpBL,MAAO,GACPG,SAAU,IAoDZ,UAjDkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAc5B,OACE,+BACIF,IACA,SAAC,KAAD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEH,cAAeA,EACfM,iBAAkBd,EAClBe,SApBQ,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC7BC,QAAQC,IAAIH,GAEZP,GACEW,EAAAA,EAAAA,IAAM,CACJjB,MAAOa,EAAOb,MAAMkB,OACpBf,SAAUU,EAAOV,SAASe,UAG9BJ,GACD,EAOS,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,WAAO,UAEL,SAAC,KAAD,CACEK,KAAK,QACLC,KAAK,QACLC,YAAY,yBAGhB,UAAC,KAAD,WAAO,YAEL,SAAC,KAAD,CAAOF,KAAK,WAAWC,KAAK,iBAE9B,SAAC,KAAD,CAAeD,KAAK,SAApB,SAA6B,oBAQ5C,C","sources":["pages/UserAuth.styled.js","pages/UserLogin.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const Forma = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 15px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  border-radius: 8px;\n`;\n\nexport const Lable = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 14px;\n  font-weight: 700;\n  border-radius: 8px;\n`;\n\nexport const BtnAddContact = styled.button`\n  width: 150px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  padding: 8px;\n  cursor: pointer;\n\n  font-size: 14px;\n  font-weight: 700;\n\n  border-radius: 10px;\n  border: 1px solid rgba(161, 165, 161, 0.397);\n  transition: color 250ms linear, background-color 250ms linear;\n  &:hover,\n  &:focus {\n    color: aliceblue;\n    background-color: #4468df;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from 'redux/auth/operations-auth';\nimport { selectIsLogin } from 'redux/auth/authSelectors';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Forma, Lable, Input, BtnAddContact } from './UserAuth.styled';\nimport { Section, Container } from 'components/App.styled';\n\nconst schema = yup.object().shape({\n  email: yup.string().nullable().email().required(),\n  password: yup\n    .string()\n    .min(7, 'must be at least 7 characters long')\n    .required(),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst UserLogin = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(selectIsLogin);\n\n  const handleLogin = (values, { resetForm }) => {\n    console.log(values);\n\n    dispatch(\n      logIn({\n        email: values.email.trim(),\n        password: values.password.trim(),\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <>\n      {!isLogin && (\n        <Section>\n          <Container>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={schema}\n              onSubmit={handleLogin}\n            >\n              <Forma>\n                <Lable>\n                  Number\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"example@mail.com\"\n                  />\n                </Lable>\n                <Lable>\n                  Password\n                  <Input type=\"password\" name=\"password\" />\n                </Lable>\n                <BtnAddContact type=\"submit\">Login</BtnAddContact>\n              </Forma>\n            </Formik>\n          </Container>\n        </Section>\n      )}\n    </>\n  );\n};\n\nexport default UserLogin;\n"],"names":["Forma","styled","Form","Lable","Input","Field","BtnAddContact","schema","yup","shape","email","nullable","required","password","min","initialValues","dispatch","useDispatch","isLogin","useSelector","selectIsLogin","validationSchema","onSubmit","values","resetForm","console","log","logIn","trim","type","name","placeholder"],"sourceRoot":""}